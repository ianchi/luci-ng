[
  {
    "widget": "set-toggle",
    "bind": "$.hide",
    "events": { "onSetup": "$.hide = true" },
    "options": { "title": "Hide empty chains" }
  },
  {
    "widget": "set-button",
    "options": {
      "title": "Counters",
      "buttonTitle": "Reset",
      "spinner": "auto"
    },
    "events": {
      "onClick": [
        "ubus('file', 'exec' , {command, params: ['-Z']}, e => snackbar(`Failed to reset counters: ${e.message}`) ) === null ",
        "  && snackbar('Counters reset') "
      ]
    }
  },
  {
    "widget": "set-button",
    "events": {
      "onClick": [
        "ubus('luci2.system', 'init_action' , {name:'firewall', action:'restart'}, {all: 1}) === null ? ",
        "  snackbar('Service restarted') : ",
        "  snackbar('Failed to restart service')"
      ]
    },
    "options": {
      "title": "Firewall",
      "buttonTitle": "Restart",
      "spinner": "auto"
    }
  },
  {
    "widget": "set-expansion",
    "for": "tables",
    "events": {
      "onSetup": [
        "$self.allChains = fw[$for.data], ",
        "$self.usedChains = allChains.filter(ch => ch.rules.length),"
      ]
    },
    "options": {
      "class": "status-overview",
      "title=": "$for.data.toUpperCase()",
      "subtitle": "Table",
      "value=": [
        "` ${allChains.length} Chains ${",
        "     $.hide && allChains.length > usedChains.length  ? `(${allChains.length - usedChains.length} empty)` : ''}`"
      ],
      "icon": "table"
    },
    "content": [
      {
        "widget": "set-expansion",
        "for": "$trackBy = (idx, ch) => ch.chain , !$.hide ? allChains : usedChains",
        "events": {
          "onSetup": "$self.chain = $for.data "
        },
        "options": {
          "title=": "chain.chain",
          "description=": [
            "chain.policy ? ",
            "   `Policy ${chain.policy} - ${",
            "      formatHuman(chain.packets, '1.0-0', 10 , [ '', 'K', 'M'])} Packets - ${",
            "      formatHuman(chain.bytes, '1.1-1')} Traffic` :",
            "   `${chain.references} References`"
          ],
          "value=": "`${chain.rules.length} rules`",
          "noExpand=": "!chain.rules.length"
        },
        "content": [
          {
            "widget": "table",
            "options": {
              "dataSource=": [
                "re = /^(?:\\s*\\/\\*)?(?: !fw3:?\\s*)?(.*)(?:\\*\\/)$/ ,",
                "chain.rules.map( r => ",
                "{ ...r, ",
                " proto: `${r.inv_proto ? '!' : ''}${r.proto}`,",
                " iniface: `${r.inv_in_iface ? '!' : ''}${r.in_iface}`,",
                " outiface: `${r.inv_out_iface ? '!' : ''}${r.out_iface}`,",
                " srcaddr: `${r.src.invert ? '!' : ''}${r.src.address}/${r.src.mask}`,",
                " dstaddr: `${r.dst.invert ? '!' : ''}${r.dst.address}/${r.dst.mask}`,",
                " comment: r.matches.filter(m => m.name ==='comment').map( c => c.msg.replace(re, '$1')).join(' '),",
                " options: r.matches.filter(m => m.name !=='comment').map( c => c.msg).join(' ') + (targinfo || '')",
                "})"
              ],
              "title": "Rules",
              "headers": {
                "packets": "Pkts.",
                "bytes": "Traffic",
                "target": "Target",
                "proto": "Proto",
                "iniface": "In",
                "srcaddr": "Source",
                "outiface": "Out",
                "dstaddr": "Destination",
                "options": "Options",
                "comment": "Comment"
              },
              "columns": [
                "packets",
                "bytes",
                "target",
                "proto",
                "iniface",
                "srcaddr",
                "outiface",
                "dstaddr",
                "options",
                "comment"
              ],
              "colFormat": ["HUMAN:'1.0-0':10:['','K','M']", "HUMAN:'1.0-0'"]
            }
          }
        ]
      }
    ]
  }
]
